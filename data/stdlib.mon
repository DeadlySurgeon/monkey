//
// This file contains functions available by default, implemented in 100%
// pure monkey.
//
// i.e. This is part of our standard-library.
//
// If you wish to make changes to the standard-library functions defined
// here you'll need to rebuild `static.go` after editing this file, as
// that contains the embedded copy of this code which is included in
// the generated monkey-interpreter.
//
// To rebuild `static.go` use the `implant` tool.
//
// If you don't already have `implant` installed fetch it like so:
//
//     go get -u  github.com/skx/implant/
//
// Now regenerate the embedded version of this file and rebuild the
// interpreter with your changes:
//
//    implant -input data/ -output static.go
//    go build .
//


//
// Mathematical constants
//
const PI = 3.141592653589793;
const E  =  2.718281828459045;

//
// Constants referring to file-handles, as used for STDIN, STDOUT, STDERR
//
const STDIN  = 0;
const STDOUT = 1;
const STDERR = 2;


//
// First element of an array
//
function first( array ) {
  return( array[0] );
}


//
// The rest of an array - i.e. all elements EXCEPT the first
//
function rest( array ) {
  let result = [];

  if ( len(array) > 1 ) {
    let i = 1;
    for( i < len(a) ) {
      result = push(result, array[i]);
      i++;
    }
   }
   return result;
}


//
// Last element of an array
//
function last( array ) {
  if ( len( array ) > 0 ) {
    return(array[len(array)-1]);
  }

  // `return null` is implicit here.
}



//
// Is the given array empty?
//
function array.empty?() {
   if ( len(self) == 0 ) {
      return true;
   }
   return false;
}


//
// Call the given function on each entry, and return an array of the
// items for which the predicate returned true.
//
function array.filter( predicate ) {
   let i = 0;
   let l = len(self);
   let result = [];

   for( i < l ) {
      let entry = self[i];
      if (predicate(entry)) {
         let result = push( result, entry );
      }
      i++;
   }

   return result;
}


//
// Return the offset, if any, of the specified item in the array.
//
function array.find(item) {
   let i = 0;
   let l = len(self);

   for( i < l ) {
     if ( self[i] == item ) {
       return i;
     }
     i++;
   }

   // not found.
   return -1;
};


//
// Join the elements of an array by the given string.
//
function array.join( char ) {
   let r = "";
   let i = 0;
   let l = len(self);

   // For each entry.
   for( i < l ) {

     // If the result is non-empty add the separator.
     if ( len(r) > 0 ) {
       r+= char;
     }

     // add on the next element.
     r += string(self[i])
     i++;
   }

   return r;
}


//
// Return an array containing the result of applying the specified
// function to each element in the array.
//
function array.map( fnc ) {
   let i = 0;
   let l = len(self);
   let result = [];

   for( i < l ) {
      let tmp = fnc(self[i]);
      let result = push( result, tmp);
      i++;
   }

   return result;
}


//
// Reverse an array.
//
function array.reverse() {
  let r = [];
  let l = len(self);

  for( l > 0 ) {
     let r = push( r, self[l-1] );
     l--;
  }
  return r;
}


//
// sorted? returns true if the specified array is sorted.
//
function array.sorted?() {

  // Ensure each array-member has the same type.
  let tmp = {};
  let i = 0;

  // Record the types.
  for( i < len(self) ) {
     tmp = set(tmp, self[i].type(), true );
     i++;
  }

  // There can be only one!
  if ( len( keys( tmp ) ) != 1 ) {
     puts( "Attempting to check an array with mixed-type values!\n" );
     puts( string(self), "\n" );
     exit(1);
  }

  let i = 1;
  let l = len(self);

  // Array of zero/one element is always sorted.
  if ( l < 2 ) {
    return true;
  }

  // If a later item is smaller than the
  // earlier item the array is not sorted.
  for( i < l ) {
     if ( self[i] < self[i-1]) {
       return false;
     }
     i++;
  }

  return true;
}


//
// Swap the value of two array indexes.
//
// This is used by our sorting function.  Currently it isn't possible
// to mutate an array-member in-place.  So we create a new array
// correctly swapping the values at the given index.
//
// This would be easier if we had "elseif" support, or even a case
// statement.  (Due to the nested if usage here.)
//
function array.swap( a, b ) {
  let aVal = self[b];
  let bVal = self[a];

  let r = [];
  let i = 0;
  let l = len(self);

  for( i < l ) {
     if ( i == a ) {
        let r = push(r, aVal);
     } else {
        if ( i == b ) {
           let r = push(r,bVal );
        } else {
           let r = push( r, self[i] );
        }
     }
     i++;
  }

  return r;
}


//
// Sort the given array.
//
// This is grossly inefficient, obviously.
//
function array.sort() {

  // Ensure each array-member has the same type.
  let tmp = {};
  let i = 0;

  // Record the types.
  for( i < len(self) ) {
     tmp = set(tmp, self[i].type(), true );
     i++;
  }

  // There can be only one!
  if ( len( keys( tmp ) ) != 1 ) {
     puts( "Attempting to sort an array with mixed-type values!\n" );
     puts( string(self), "\n" );
     exit(1);
  }

  // While the given array isn't sorted.
  for( ! self.sorted?() ) {

     // make a pass over the array.
     let i = 1;
     let l = len(self);
     for( i < l ) {

        // if this element is wrong swap it.
        if ( self[i] < self[i-1] ) {
          self = self.swap( i-1, i);
        }
        i++;
     }
  }

  // Should be done now.
  return self;
}


//
// array.uniq returns the unique members of an array.
//
function array.uniq() {
    tmp = {};

    let i = 0;
    let l = len(self);
    for( i < l ) {
         tmp = set( tmp, self[i], true );
         i++;
    };

    // return the sorted keys
    return( tmp.keys().sort() );
};


//
// Convert a float to an integer.
//
// Like Go we discard the value after the period, so 4.9 will become 4.
//
function float.to_i() {
   return( int( self ) );
}


//
// Is the given hash empty?
//
function hash.empty?() {
   if ( len(self.keys()) == 0 ) {
      return true;
   }
   return false;
}


//
// Convert an integer to a float.
//
function integer.to_f() {
   return( self + 0.0);
}


//
// Remove leading whitespace from the string.
//
function string.ltrim() {
   let reg = "^(\\s+)(.*)$";
   let out = match(reg, self);

   if ( out ) {
      return( out[1]) ;
   } else {
      return self;
   }
}

//
// Repeat a string N times.
//
function string.repeat(count) {
  let r= "";

  for( count > 0 ) {
     r += self;
     count--;
  }
  return r;
}


//
// Reverse a string,
//
function string.reverse() {
  let r= "";
  let l = len(self);

  for( l > 0 ) {
     r += self[l-1];
     l--;
  }
  return r;
}


//
// Remove trailing whitespace from the string.
//
function string.rtrim() {
   let reg = "^(.*?)(\\s*)$";
   let out = match(reg, self);

   if ( out ) {
      return( out[0]) ;
   } else {
      return self;
   }
}


//
// string.split returns an array splitting on any characters included
// in the separator string.
//
// By default the split is on whitespace: " ", "TAB", & "RETURN".
//
function string.split(sep = " \r\t\n" ) {
  let i = 0;
  let l = len(self);
  let r = [];

  let tmp = "";

  for( i < l ) {

     // get the character.
     let c = self[i];

     // is the character one of our split-characters?
     if ( sep.find( c ) != -1 ) {

        // OK push any previously-accumulated token into our array.
        if ( len(tmp) > 0 ) {
          r = push( r, tmp );
        }
        tmp = "";

     } else {

       // store the character into our accumulator.
       tmp += c;
     }
     i++;
  }

  // Do we have a dangling-string?  If so append it.
  if ( len(tmp) > 0 ) {
     r = push(r,tmp);
  }

  return r;
}



//
// string.replace removes a value from a string, replacing it
// with a new value.
//
function string.replace( old, new ) {
  let s = self;
  let index = s.find( old );

  for( index >= 0 ) {

     // get the prefix
     let pre = s.substr(0, index);

     // get the suffix
     let suf = s.substr( index + len(old) );

     s = pre + new + suf;

     index = s.find( old );
  };

  return s;
}

// string.substr returns the given substring
// from our input.  The length of the string
// to return is optional, and will default to
// the length available.
//
function string.substr(start,length = -1) {

   if ( length == -1 ) {
    length = len(self) - start ;
   }

   let res = "";
   let copied = 0;

   for( (start < len(self)) && ( copied < length ) ) {
     res += self[start];
     start++;
     copied++;
   }
   return( res );
}


//
// Trim leading & trailing whitespace from the given string.
//
function string.trim() {
   let l = self.ltrim();
   return( l.rtrim() );
}


//
// Convert the given string to lower-case.
//
function string.tolower() {
   let i = 0;
   let l = len(self);
   let r = "";

   for( i < l ) {
      let c = self[i];

      if ( c >= "A" && c <= "Z" ) {
           let c = c.ord();
           c += 32;
           c = c.chr();
      }
      i++;

      r += c;
   }

   return r;
}


//
// Convert a string to a number
//
// (Possibly an int, possibly a float)
//
function string.to_number() {
   let reg = "\\.";
   let out = match(reg, self);

   if ( out ) {
      return( self.to_f() );
   } else {
      return( self.to_i() );
   }
}


//
// Convert the given string to upper-case.
//
function string.toupper() {
   let i = 0;
   let l = len(self);
   let r = "";

   for( i < l ) {
      let c = self[i];

      if ( c >= "a" && c <= "z" ) {
           let c = c.ord();
           c -= 32;
           c = c.chr();
      }
      i++;

      r += c;
   }

   return r;
}