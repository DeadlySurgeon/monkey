//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a map containing all embedded resources. The map key is the
// file name.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES = map[string]EmbeddedResource{

	"data/stdlib.mon": {
		Filename: "data/stdlib.mon",
		Contents: "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",
		Length:   19662,
	},
}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	if entry, ok := RESOURCES[path]; ok {
		var raw bytes.Buffer
		var err error

		// Decode the data.
		in, err := base64.StdEncoding.DecodeString(entry.Contents)
		if err != nil {
			return nil, err
		}

		// Gunzip the data to the client
		gr, err := gzip.NewReader(bytes.NewBuffer(in))
		if err != nil {
			return nil, err
		}
		defer gr.Close()
		data, err := ioutil.ReadAll(gr)
		if err != nil {
			return nil, err
		}
		_, err = raw.Write(data)
		if err != nil {
			return nil, err
		}

		// Return it.
		return raw.Bytes(), nil
	}
	return nil, fmt.Errorf("failed to find resource '%s'", path)
}

//
// Return the available resources in a slice.
//
func getResources() []EmbeddedResource {
	i := 0
	ret := make([]EmbeddedResource, len(RESOURCES))
	for _, v := range RESOURCES {
		ret[i] = v
		i++
	}
	return ret
}
