//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/stdlib.mon"
	tmp.Contents = "1f8b08000000000004ffec5aff93dbc675fffdfe8a274eeb801149dcc9526345a6358ead74d4a68ee774693b95546b093c905b81bbe8eee24e4c46ff7be7f3de0204cfb4dc344d7f2a676c09c0eefbfa79df765596176549373b1ba9b12d53e55d32d6456a7a5725eb5d24736b6c6b362dd3e6403537a66fd382ecbe6b79cf2e714dd6d1d5e5e5df8252d707a6bd77eff9b0ba50e276c52be56023752624f20df93e504cc6d526d4cbd66e8209e386970d1d7c4f7736ee2879da9bf74cd5ceb82d473ca71dff68eb44dc9a1bebb886303b0e0c52bf685b72cc357607def4b6ade95d4c26d96ab5f5efc8348903716d93755b4a8331166422c8a49d4947c3803def375cd75c53e5bb03d449d853f99ae96e67ab1d34b5ae6a7bacb14e89306dd9713089eb6ca1a575894317387118ac75e3cf8ad84716ceefecbe6b8d4bef2879df0e9bb2c56aef7e91c8b4814d7da09db9e5c97aeb62326dcb35359c2062a2d6be678afed7d951f86d3d6d39d1b227dadab4eb37abcaefcbf8fe439919032fd0e73b7f4781078d44b6d12ab71ca2f56e348c20cbb87ad42ced183426ead39d4d3bf82a0cae9e489559d3d2baae4f549b644a5afa3ee169f42328124103f5b018e722ebf64f26ed780f8f9b16be04f612bc7b517917137dff92d6f4f9eaeaf1d593a78ffeeec9e74fbe78faaba79f3fcb5f5f10ad891ead7e75f5c5a32ff0dfe3274f2f1f3f793650ff06348c4b9102371c82c0c88bdecb9d7175cb116082176b6a7ca05737dfbefc6e813f7eff871bf9f3c5f535445569e433785e0e12bcbac14a5ad3d5e4cd8beb6b5ad3a367a396bfb52126620d4c98df3832219803480f114d0d5615fa81e6f4a70ba2c0a90f2ebf7b7df996e6cf2e3e8e646f764c81e309455a6a609bb61d18467af1afdfbcf8fe06ee5526276c412173c85c5b4e78dbb789d6f4faedb38b0b22db50412dbb42e49ed35774955793acb76a0378baf1a1204b5feaf2f9b80cea64a25d1f774590a7852afcdabe9d3f93ed44f6e143fdeb47bc90ffa921b254531bfccefc372cdb9a784fc5511de54e50e8729454b9a9aaaf8f4a2faf54c68f304859d23b5d47ae6fdb77925bf65d6b2b9b24c3adc453307559d2cb28d6dfda5bceae27de77e9f01cdf4704886d57faa150041c258ddc36735aaf2772c2a20008a5d0b3986c6aacc6b491a7b6fa06a0409e543146b6de119b6a47ec52382c724610ba6610d637d8084d6ce27d848f49532ae875816b5b990438621f527ae859227de4a2ca35b64d1c8ac996ac274007105d8a1e786a692d1012c5c7b78a9a2330214a86db402a4352d4a13561ff6bfb5628005d0d15a3c0852c9a6719f407de2317416a7e5c64922a0c915a1b2433600518193d79cfd4fed7621cb1986f9ac828d70d19775864fb52ecb8b28de55acc4c5617abe5ce20a5b1ae2ee0902c3f24ffa40d114fc7f03cda0b3619ec048881e6f1eba892cd3614941de354d52e4b723e51e37b57afc02847c7f2ead9c5c7632efc079fb5cae93042f711679b839847011a1332f639c5ffc35b57a02285414aa81e684db399c888c79fb54459d26f7d98605fc4be671f684258fa524220bb15d1eebc5b4aac92a96b113b726782493e08a149ec86d3fc028b3e5c8bfc222d9034f20131af8e77fc612c1b9964a087eb6c9822037bae5bcf83f00cfe4663e7a6d24a73356ae61b325dd71e86d7232611fd6334279fed968b5a76ea4f42756fba821a574dfdf54907e5201e0331d7a1fbee812db502a57d476bb018ed926d2b6018e99c0674da77e3b2f3069422756a45f4513c9af11c3e83aec9391c600436a1824a732fb55d64b55afa6a9add877d59e4854668bbbc923e40346f974b688980cce176e2f1e843e2fa79fe16a54e20d891b447bfaad380685d7e4e21fda245e942c2e1858b9829a47088d7977b349a8176466b5d347ba674e818c8852aeaa03f7d84c078ceee5772d75cf9a051843d119b8e91c84e9c3ae9259458e454a47d972d63dfaeb0b7982f54d1c1b3d9b192a664aac2fc5119471b26efda0379c70fa63d0ebde7432c8407583e584f9a1deafa140b9a7d9d12825fa2c453b5e3eafd0809ed9af7f603d74b4844b7a6ed393e78e366a3504a46539c2ab7a0d974017fb0a9b8121d44f2c1645783fd7e0ca2b2a4afd1562286ffc8c197def19067e15fd3de99431cdd3c2428fa921e0d7199a122060423618d06a62143adc14026c5c1468a7bcc2d017398a42b75249bd05a0eba0a381370603daa83e2e8d4b9236b20f35886be54b85b745dd20ccb2fa33cf736f20ae047b2d5222c02e7556842a6a1fbeace742293f803564a777e10d0d5fc01b8d3e958466f9b4783cd4107631fc4df43125c117dd387c02eb507b2b030e6bccec76837ad344b1893fb84c66848ba439458b7ec5a53f18ae895a73ba62ab0ac23c7772a12f26de543e00af4e39de93a41db6ec0139924da68b51405247605e336d29defdb1a206713c5250d18ed4c4d336e23db6646b1ef3a1fd2825007a537a5ca44911d031ce3246145547cdb3394016fc711a3b26da88f66cbdaebce61b6c12e2afe0a12176416b4c91e0682cd3f1be0564ad7467a32bcdd4cde1a1d38f0fa3469e67cf1c90c2a634766074c606ab1e868ccf165ae17202e99352c442a893422fa4830ce1171d0140de67a3d2a32fe0621331d5163a0738ed47dd63424757b4ce9d8f773c03e49f2af7c98e240e2ed040736d236f8188152c74d632bcb0e3edfdc5adfc75657dff79e0f49ea9786f5ffa7fb69ba8771c690feab64fbb2a47fd9d9564f7034c0c5b16425c940003ee6d1071250932a8d8ca9202a4b3da933d49918c9df4ac666a586449c3189e892d2929f11a563dd4525a0dca41c434c1968776cd11ddb38ad3677c1bbade42db243fb3ac4a4c4bf7d3b4df2223316e80f2b4887b79c49ecf26a417690e51826a0a9b93fbf93125096f46a3724c01a85d0f93be89b6b03e84f6b835877d53bfb9f7985763178d133696f7332ab4888dd0b1aac96a08128daa2a0df9147e40a1859075c793c63e363cf736a0f25867e077f1d1b9e7b9d0e7ea32d3074e14559668d247d2b72a4c391af6a0ea1ba92b6672e302ae648642081cc5e96384bbbe590c850d37a141e8f00c051e1f6784afa3b9c5cfebdd4b3dac6cae48e4ecbad1ee7a284741cacaf17143d3d5e3da53bdbb6b4e1caef991e9f9a5578ad92ffc10e661de4b52e69af80166deac893a3969d89bb73272d78ffa983966c8abff0bcc5679339480b3ba18666039eea39d831f91f9afb9a02a9f4902e5797277a5ef3dedf32b56c6ab405773b9b3876a6626a82df8b9db5bb3ce594dfb529d8fdc009d00cbcc5f8fcefc59b37f1e1bc58fd72fe37c751daf73871d99b54e1d86eabf09bcbc12022bf9005c839c0dbd043cadbd7576fe724e9e35e5d553f8a72fa19c765da7b5d73c706485359e93b4a769f5bb331e0f4db2ac8daa2f2bd4b2a8028a30701c35c255f4f672b9da3b955e6a44b3e3d4c5deb504726f35e40dc1fcb23d361b6ec4496b3113f08d8fe847032ec8979e8e746bd6b85430ac6b6ff033c849fc4c3ea97cfe700c5ff16202eff1c40c0c465990dbe8a5d6b71348d33c688f423499be4b574e6dee1388daa9d09a64a1ce278dd032af98c623ca519c86626bf19afd1347884998d207a0cae5fd38c660b9add7cfd9bd9823ea3d9f58b9b3f5c7f371322f7c120248ac8389898d19bf026c98027bd25a03196033cfca818e0259a541c1b64f86815c019d7809cfbd5b82ce5a2085976b402aa1e00c4892ad2922ae7a11aad6509254f366020c67424b78130c372a4159feb2ee9ac23777a064938d779b0a6a55e0ae8126d0c7eff8fd21d8b5fbac0b9e35c9aaaeaf73d064a5cffbd6749915e388a53b3cca8ede8e1d189e0ace6344ee4071349ff8d661a063adb21e0c39814d0270c5dfe20aba0cc076db846759198b35483c0e3e91e09519ce3e508cd6d7b2ec04317f2ad9443b9f533541bb745782e357d3d271c2b468f13377638f585de9fd07854362c600e30163e399be6b920035a792045b6280b4132442493ebb19489319951602c43eab0b820d2ae56c751a9df6711ae9bb820dfd60b195d8fe88e196b1012d8930115ef32667c5bc35723923180d357c3fd86fa6502e72e70633fe86b90eb020bb1d86f620ac5e54219e4aa246754b83205b063df9c6c8dbdb496c356dd480f0565beada5f55146d0018c1e8a6e0fb153ab1ee54d6bbaa70ee5be2b7b244a6b22e00ad66d33cbfc555b4cedee550debb6582cae41f4c9cdea8ae4aaaf65b74d3bc4a5e824f4b038e16a1a291171ec3bfceb00d3ea358e7456f9df0650f2b27a879e412899e15f109c75ad0a54c464425a64de88703818c619500a99d6f8905d8f42a72f2171811a3ba7258e1342ca9d80ec870f03c3c0c867b20dd7f91d6e3fd6e892f1aec15da2ca902f1485de9c3efb8c0a5cf363b5dc34420c1cd6e1da545a9088d0c4ead7a2c25046e5611c172ae1971f257ed56f72e503744e6e5b83dd8fddd6679f2eb4d9a5e2a2b3c6bd5f6d91fc21ebd09721664651dab13a9f3480437b098f4e190210adbfe3b0c451ce79f65e16e42e455c31d62279823cc8b990498511774d52a878e6587d6073dd7aa6c428562a04f7eceb197c57d1976b9afddb6cc44cfe810b08542b1fea42390fbf0a0efdfc919866f8e9da6a178e6bc58b884f7835cb15b055d3b4824fbd3ce44b6d3b077b9a9c38614743aedf6f38e425c5f77ab87740f3617186924ffb0e435b7f7a10961190fc0f4a666af0dc70bf79b3fa8bfb6c78094c303aa8cdc6f2064b1c91342cc43495174e103e18e01ca0faaefb34a064c154bfff2b409909a0fef867026ab9fe2b00eabf020000ffff7e95720ebc250000"
	tmp.Length = 9660
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
