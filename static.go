//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a map containing all embedded resources. The map key is the
// file name.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES = map[string]EmbeddedResource{

	"data/stdlib.mon": {
		Filename: "data/stdlib.mon",
		Contents: "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",
		Length:   19646,
	},
}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	if entry, ok := RESOURCES[path]; ok {
		var raw bytes.Buffer
		var err error

		// Decode the data.
		in, err := base64.StdEncoding.DecodeString(entry.Contents)
		if err != nil {
			return nil, err
		}

		// Gunzip the data to the client
		gr, err := gzip.NewReader(bytes.NewBuffer(in))
		if err != nil {
			return nil, err
		}
		defer gr.Close()
		data, err := ioutil.ReadAll(gr)
		if err != nil {
			return nil, err
		}
		_, err = raw.Write(data)
		if err != nil {
			return nil, err
		}

		// Return it.
		return raw.Bytes(), nil
	}
	return nil, fmt.Errorf("failed to find resource '%s'", path)
}

//
// Return the available resources in a slice.
//
func getResources() []EmbeddedResource {
	i := 0
	ret := make([]EmbeddedResource, len(RESOURCES))
	for _, v := range RESOURCES {
		ret[i] = v
		i++
	}
	return ret
}
