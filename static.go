//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/stdlib.mon"
	tmp.Contents = "1f8b08000000000004ffc458fb93dbb611fefdfe8aed4d9b48b1249efc68e29e954cc6713aeea469e67c7d4c1d3786c8a5881a023800788ad2f1ffdef916204529b2d3a6ed9433c999e0621fdf7ebb58a8282e8a826e1b1da8d686a974362a6d03d59d2da3763690ba53daa8b5615aefa9e25a7526ce486f5bc35bb6912bd296965757bf82a6b6f34c5b67dff07e719194eb052f92051da8553e92abc9759e4254b652be9a1bbdf6ca0f1b9ed7b4771ded7468283adaaa374c65a3ec8603de63c33fda3a72b7e25a5baee04cc39ea1ea4363c83257d8ed79dd6953d1eb1055d4e562e35e93aa237be24a476d37147b3066a402d4c446c5033030cfdb3557155754ba768f7022f694ae62da35ba6c10a9b6a5e920a36d52c2b461cb5e45ae3242736d23fbd67364dfa375ebcebad80516cbaff5b635cac6d7149d33fda68c58e5ec879194f1acaa3d35ea8e47f2da86a88ce18a6a8e703192d16f9882fb4d4e149e8da30d479a77441b1d9b6ebd28ddb6086fbe2fb261f005f17ced76e4b98f487c1b50b9631fb4b30330c22c65ab21b2d830748cc2a79d8e0d72e5fb548fbccaa669ae6ddb45aa545405cd5d17f136e4111a891041cab080739163fbbd8a0d6f917165904b702f22bb17a5b321d237cf69450f16cb87cb478feffffad183479f3cfef8f183ebfcf519d18ae8fee2e3e527f73fc17f0f1f3dbe7af8e8bad7fe143a948d813cd7ecbdd0c849dcf346d9ca70009990c58a6ae7e9c5ed17cfbf9ee1cf1ffe782b7f9fdddcc0d5e48d7c86cdabde8317b790a4152d472bcf6e6e6845f7af8728bfd43e44e25498805f5952deab3d54f7154d35a426e9034de91f17449e63e76d5e7b79f58aa6d7176f07b5b70d93e770a491e6a9b09531bdc140cffef2f4d937b7486f327264161ab2856cd570c46a6722ade8e5abeb8b0b225dd3840cdb89f83da54f6999a549e475c20099ae9d9f90a627497c3a88219cacb4ed4233f1f2364b01bfd4afa6d7b29d48dfbb97fef9160bf2bf0444f66a8cc157ea5f40d6a87012e2104eb24e08e86af034594ba1be3c043d5f261fdf0290a2a0d7498e6c67cc6be92ddbd6e85247e9700bc914a02e0a7a1e04fd8dbee39c7ae26d1bf79fe1fbc000c176913e4c12030e9e0636f59456ab919f401404a1e83b16c8c660d5ca041e63f514a4409f4c6e0c669d255665436ca3dfcf724710bdaa77d6d5d8884874e46d408e29b554e86b3d57ba541174c43eb474dfb154fa602505576b13d94f465b729c201d48742571e0cdd04a2824810fab89350762c2954cb75e55a6a484432bc2fe97fa956800bb6a9a0c0e4f44689a7d480f6c0f5684a9f975965526678812da5099092bc4c8ecc97bc6f8df08388298abebc038ae6b52763fcbf85268b9d4b5e64a60269d8413726798526b5b4d9090ec3f3c7f2f86a8a743791ef002263d4ea018741ebe0e21e98ca1b0ec50a729eca220eb22d5aeb3d502867275cc97d7176f0fbdf0772e4795db6140ec03cfd67b812711344474ec7381ffdd693bc189e47b2f11baa7155d5e8a8f78fd49248a82be747ec47d71fb041f4442107d2e2590d38a6ab7cecea556495595b81db8555e45e745d1a876fd717f01a2f756e2bf780b260d76a0cca5c45bfe7e3836b24a4ff75619984926f6346d3d4fc233fc1bc0ce43a596e16a88ccd5a4dad6ecfbe58193a8fea19aa3cbb8e5432d27f59d54ddaa7642b52dc7f97a6f8272110f8598cfa1d3f400cb7402c56d4b2b981870c9d80a19063dc7051db7ed20761e4039a48e51c41cc5038ce7f8e9934ceee12023b88910923727aded228765e8d37177eff7659767a942cd7c297380446ee673448982cce57694f1e07ce4eab3fc2dc839816247d31ef29a92064627f17301a52ffda104c790bc256ce3e5c7f114057d8e090774fa81bd2b9ce5bee4614a999dda87c1625f2bf484eef714c95e8bd330246d0667694d8a8cc2dd40fa940e14b618a13dae0452391752b1acbcd1ec9314421676421e8d2a8584b23aa97801f6a8233e49c86b0c003297c99301cfc7ac2c210fa8fb741e88c3590ae7e198452f76aa159fee94e91828c59deb1db4157fcf41f2d0df02759e52d7fb7447735e2e457d3d2e889e76deb38d664f1a08e3cad1ba10f4dac8b98d1b5b177146f7f53fdfe266e049db796b54c90ba2178e764ca5679123cbbbe412dc289df75c427fd8a9b6eddb83f81f48458926356e09e0c8fd9deb4c456b2656415252c350a32aba641358d79714bab6753ece082d59c6242a5510df7197605c6a1744932f3a4630c8a7e5805b9baea90b6ac369ec9a9e3928e1f184d48cd6995c20adfa93026fa58bae653cc0ea7ab4aad2ec8be5e3fa05f96550c12728c1900845531996df49288dc355651fd2030d502e45ee67e255df92de12c039300e9162d659ad864086e7448f84d1eb21fab1aadc3507d3d4f7177de82ed8f753c43eea372f9c1ff340eaed88073ad0c6bb10c052cb75ad4bcd16395fdf69d70593a47b56670520bbb4d254d67f6eb44937dbc436b1425a180f513e14f52f24bba280a57ba17c534445917ec150d4aa10c8dd49fbe0a40d5d210384544b9fcbef27d9c6f269bed3629a1a34a6061dc6ad6fe79ddd481191ee8f75340ddcb0c0216460d471c46708a407129486da4c6b3d5fce488f733d88e74694f328fda828e845d3576385ae6cdd0ef1e64605fda951a18e8a0297e83bf69114d5c6a1cc1d3a087e23d81c7e1ef90a3f59fc56ba47a543a97c1a88a439e4df7150b02d7bedaa1905470f178f69a78da135976ecbf4507832645e6c2da2fb4e4be63131c9f43c81e534abd214043f5c878fee588d0acdb92b16d6df77c35abce17d984cffc38b96cb9059780b9cd0b13280c771f63846f75d7d1a295241f7e86a717574edbfe1adbb6332ac2a34e15da3238756954cb5775bc1f9dce49cd74cf47adb5b92a6c11bcccd7f9b7cfb6db8379d2c3e9afef23043bb0e57adad8a25eeeb9b3482a426076a4f440045058ef527b6acbe5cbe9a128eedd3d693f228c1a5cfa314dea4b98954f676060e0e9cc8119c19aefab91ff19c14e83b66ab3447b3a9659e1247e8a7a6a99b047cf44a9b9f81bc7f27f28b8f3e9b02feff16f4573f03fa5bafb703a73e787f90a9efe6749c4bd169a4c809c0eed9277827224cc80cc81cd1bc2f22f48db1419492713bf6738c07e7cd3b1118b31c6d5c4eec731c41eaf19b17eae0524ef0d3969ee80da19252f3955f14f2bab4ee923e5dd1e5e797f4c10754d293155dfef5920ea5214fafa05c385f4d120cfd53e266f7e0be40d33f30562ecac61f64fbe62ead3ddb173297b2537a7c86f6f86c7e1f9e5ddbbe1f4f11f87fe0a94678fef06fe2395ffd0ff0fc67000000ffff85ac87799a190000"
	tmp.Length = 6554
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
