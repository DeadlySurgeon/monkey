//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/stdlib.mon"
	tmp.Contents = "1f8b08000000000004ffbc587d93dbb6f1feff3ec5fe6e7e4da45812effcd2c43d2b998ce374dc49d3ccf9fa32b5dd182297126a10e000e0294ac7dfbdf32c408a92954bddb4e54c7226b8d897679f5d2c5414674541371b1da8d686a974362a6d03d59d2da3763690ba55daa895615aeda8e25a7526ce4837ade1866de48ab4a5cb8b8b5f4153db79a6c6d9b7bc5b9c25e57ac18b6441076a958fe46a729da71095ad94afe646afbcf2c386e735ed5c475b1d36141d35ea2d53b95176cd01ef71c3ef6d1db95b71ad2d577066c39ea1ea6363c83257d8ed79d56953d19b1055d4e562edde90aa237be24a476dd7147b3066a402d4c48d8a7b60609e9b1557155754ba76877022f694ae62da6e74b941a4da96a6838cb64909d39a2d7b15b9ca08cdb58dec5bcf917d8fd68d3be96217582cbfd14d6b948d6f283a67fa4d19b1cad98f2329e359553bdaa85b1ec96b1ba232862baa39c2c54846bf650aee37395178d68ed61c69de11ad75dc74ab45e99a22bcfda1c886c117c4f3addb92e73e22f16d40e5967dd0ce0ec008b394ad86c8e286a163143e6d75dc2057be4ff5c8ab6c9ae6dab65da44a4555d0dc75116f431ea1910811a40c0b386739b6dfabb8e106195706b904f722b27b563a1b227df79c96f46071f9f0f2d1e3fbbf7ef4e0d1678f3f7dfce02a7f7d46b424babff8f4f2b3fb9fe1bf878f1e5f3c7c74d56b7f0a1dcac6409e6bf65e68e424eef946d9ca70009990c58a6ae7e9c5cd57cfbf9de1cf1ffe78237f9f5d5fc3d5e48d7c86cd8bde83173790a4255d8e569e5d5fd392ee5f0d517ead7d88c4a93001bfb2a4bc573ba8ee2b9a6a484dd2079ad23fce883cc7cedbbcf6f2e2354dafcede0d6a6f364c9ec381469aa7c256c6f406033dfbcbd367dfdd20bdc9c8815968c816b255c311ab9d89b4a497afafcece88744d13326c27e2f7943ea7cb2c4d22af1306c874edfc84343d49e2d3410ce164a56d1736132f6fb314f04bfd7a7a25db89f4bd7be99fefb020ff4b4064afc6187ca3fe05648d0a47210ee124eb84802e064f93b514eacb7dd0f3cbe4e33b005214f426c991ed8c7923bda5698d2e75940eb7904c01eaa2a0e741d05feb5bcea9276edab8fb02df070608b68bf4619218b0f734b0a9a7b45c8efc04a2200845dfb1403606ab5626f018aba72005fa64726330eb2cb12a37c436fadd2c7704d1ab7a675d8d8d8844476e02724ca9a5425febb9d2a58aa023f6a1a5fb8ea5d2072b29b85a9bc87e32da92e304e940a20b89036f86964221097c584dacd91313ae64baf5aa3225251c5a12f6bfd4af4503d855d36470782242d3ec437a607bb0224ccdafb3ac32394394d086ca4c582146664fde33c6ff5ac011c45c5d07c6715d93b2bb59c69742cba5ae35570233e9249c903bc1945adb6a828464ffe1f99d18a29ef6e5b9c70b98f4388162d0b9ff3a84a43386c2b27d9da6b08b82ac8b54bbce560b18cad531bfbc3a7bb7ef85bf7339aadc0e03621f78b6da093c89a021a2639f0afcef4edb094e24df7b89d03d2de9fc5c7cc4ebcf225114f4b5f323ee8bdb47f8201282e87329819c5654bb75762eb54aaaaac4edc0adf22a3a2f8a46b5eb0ffb0b10bdb714ffc55b3069b003652e25def20fc3b191557abab7ccc04c32b1a769eb69129ee0df00761e2ab50c574364ae26d5b666d72f0f9c44f50fd51c5dc62d1f6a39a93f49d546b513aa6d39ced79d09ca453c14623e878ed3032cd309149b96963031e092b115320c7a0e0b3a36ed20761a4039a40e51c41cc5038ca7f8e9934ceee12023b88910923747aded2c8765e8f37177eff7659767a942cdfc52e60089dccce788120599cbed20e3c1f9c8d517f95b907302c58ea63de435250d8c4ee2a7024a5ffa43098e217997b08d97f7e3290afa12130ee8f4237b5738cb7dc9c394325bb50b83c5be56e809ddef2992bd16a76148da0cced29a141985bb81f4291d283418a13dae0452396752b1acbcd1ec9314421676421e8d2a8584b23aaa7801f6a0233e49c86b0c003297c99301cfc7ac2c210fa8fb741e88c3590ae7e198452fb6aa159f6e95e91828c5adeb1db415ffc041f2d0df02759e5257bb7447735e2e457d3d2e889e76deb38d66471a08e3cad1ba10f4cac8b98d1b5b177146f7f53f6f7033f0a4edbc35aae405d10b475ba6d2b3c891e56d72096e94ce7b2ea13f6c55dbf6ed41fc0fa4a244931ab70470e0fed675a6a21513ab2029a96168a32a3a671358d7e714bab6753ece082d59c6242a5510df7197605c6a174493af3a4630c8a7e5805b9baea90b6acd69ec9a9e3828e1f184d48c56995c20adfa93026fa58bae643cc0ea6ab4aad2ec8be5c3fa05f96550c12728c19008455319967f92501a87abca3ea4071aa05c8adccfc4abbe25bd2380b3671c22c5acb35c0e810ccf911e09a3d743f4beaadc3507d3d4f717bdef2ed8f773c43ee8372f9c1ff340eaed80073ad0dabb10c052cb75ad4bcd16395fdd6ad70593a47b56670520bbb4d254d67fde68936eb6896d6285b4301ea2bc2feaff93ec8a0296ee85f24d111545fa054351ab4220772bed83933674850c10522d7d2ebf1f651bcbc7f94e8b696ad0981a7418b7bead77762d4544ba3fd6d13470c30287908151c7119f21901e48501a6a33adf5fc72467a9ceb413c37a29c47e94745412f367d3556e8cad66d116f6e54d09f1a15eaa8287089be651f49516d1ccadca183e03782f5fee7916ff093c56fa57b543a94caa781489a43fe1d0705dbb2d7ae9a5170f470f198b6da185a71e91aa687c29321f3626b11ddf75a328f8949a6e7092ca75995a620f8fe3a7c70c7daa8b03975c5c2fa5d37acc55bde85c9f4175eb45c86ccc25be0848e95013c8cb3c731baefebe348910aba47178b8b836bff3537ee96c9b0aad084b71b1d39b4aa64aabd6b04e75393735e33d1eba6b7244d83d7989bff3679f52adc9b4e169f4cff7f3f43bb0e57ad46c512f7f5751a41529303b5272280a202c7fa135b565f5ebe9e128eede3d693f228c1a5cf4861fa49f29a5b56605af295bea5a89b7c100ecc48df165e6427a5eb6c4c0e4830e906d00f54f2f570a84a03349b649c92c8dd53d4759ae64865db33b8fbbe3f3216666447be7cc8c4373827539ec0433f37e35d273a44afb4f937f8e07f920f8b4fbe988214ff29425c7c08210031661faf9b81e91fdd1d643a0d323db0ff3845c791a29583097d4d08de899e1332033207c5d79736bad9d8200adcb82dfb398696d3e69d086486084570b8c81c216ff067344820f5f8250ed5792e73c5f141938a0e4225a523417ee7c8eb72a094f4f992cebf3ca78f3ea2929e2ce9fcafe794ea65787a05e5c2f96a9260e89f12f7cd07f7059afe81b172516efc5eb63f72e4c0c9f685cca5ec949327437b3831f478aa9c38e0a8c876cd8a3d72581434f92e8db1bb7ceeccfab976d7b7d4c3912f3320baef939a31e0b9d9bd7ab5f8c53d4e9893db76c2ec685ceb99d40be224cb82687939ba1e805384eadaf66e4289c038beff15a1d488503f7e20a1e6cbff02a1fe190000ffff103c5362311b0000"
	tmp.Length = 6961
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
