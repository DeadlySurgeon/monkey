//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/stdlib.mon"
	tmp.Contents = "1f8b08000000000004ffbc597b93db4672ff7f3f457b2b91492f1fbb7ac496255a65cb724a8923bb56eb241549b18640839cd310839b192c45bbf4ddaf7edd03105c51f2f97c77acb2b518f4f4f3d78f19cce727f3395dad6da4ca3aa6c2d7c9d83a52d5d645b2be8e64ae8d7566e998963b2ab932ad4b13b29bc6f186ebc425d99a2ececfff159c9a36306d7cfd8677b313656e673c530936526342225f916f03c564ead28472eaec3298d06f785ad1ceb7b4b5714dc9d3c6bc612ad6a65e71c4735af37b5b07ea965cd99a4b28b3e6c060f5a973543397d81d78d95a57d2eb984cb2c56ce55f93a91207e2d2265baf2875ce9890896093d626ed1d03f1bc5972597249856f763027614fe14ba6edda166b586aebc2b5a0b1b532615a71cdc1242eb387a6b64e1c9ac08943e7ad2b7f54c536b2487e6d378d33757a4dc97bd76dca1e2b7dfd6922e3029b72476b73cd037a5bc7649ce3922a4e503191b36f98a2ff32070abf95a715279ab6442b9bd6ed7256f8cd3cbe793bcf828117d8f3cc6f29706791e8d67be59a43b4beee1d23c83275d95b96d60c1e03f3696bd31ab10a5da8075a65d134b575d3262a4d32739afa36e1a98f233812c1028db038e724dbf65f26ad7983881b8758027b09d13d297c1d13fdf8941674677671f7e2defddbff76efcebd2fee7f7effce83fcf609d182e8f6ecf38b2f6e7f81ffeedebb7f7ef7de838efb63f030758a14b8e21004465eec9eae4d5d3a8e0013a25852e5033dbffaf6e9b309fef9e1a72bf9f7c9e52554556de435649e771a3cbf02252de862b0f2e4f2921674fb416fe57736c444ac8909f79b9a4c086607d65d465305aa91bea031fd7a421438b5a1ce6b2fce5fd1f8c1c9bb9eedd59a29703ce048534d6ce35c2730d293ff7dfce4c72b8457851c8805872c214b759cb0daba440b7af1eac1c90991ad68448eeb91e83da6afe8225393d05bf501225df930224b0f957cdc93c19cccb469e37a14e469a206bfb0afc60f643b913d3bd33fdf6141fea78ec85a0d7df0bdf92b3ceb4cbc61626f8e4a271874de6baad2d4d4177ba3a717aae33b38643ea7d74a4775ebdc6ba92d9bc6d9c226a9703389145c3d9fd3d328de5fd96bcea127de3469f708ef7b04886f67fa62a408d86b1ad955635a2c067ac2a30008a5d0b2b86ce8accab8c8435f3d06285027558d5eacaf894db126ae53d84d724510bea653d657d8084b6ce24d448c494b2af835814b5b980438621f4a7a685932bd97a2c655d6250ea3c1966c274007109d8b1d7872b4100889e1fdaaa2660f4ca892e1d6b1ca9014736841d8ffc2be120e405745a35ee191108db30efa83ec5e8a20353f4e324b558648bd0d9619b0028c8c9ebc67e8ff4b718e78cc575564b4eb8a4cbd9b64ff526cb8b095e552dc4c5689d573479052d9ba1c2120597f68fe511f229ff6e9b9f7177cd2f9091003cffddbde249b7d2828dbe7a99a3d9f53ed1355beadcb1904e5ec985e3c3879b7af85ffe1b355b91c46d8dee36cb913f728406342c53e66f89fbcad47e848a1d312a6075ad0e9a9e888c7dff4c47c4edff930c0bea87dc33fb08440fa5452208715d95efb7a2ab94aa62c45edc88d0926f9208c06b91b0eeb0b3c7ab610fd455b20a99703665e035ff3dbbe6d649681ce16d931a30cecb16e3d0ec223f8eb9d9d874a2bc3556f99afc8348ddb75cb3d2691fd7d36279ffd969b5a0eea07a1ba31cd88aaba18c6eba301ca49dc2762ee4337c3035f6a074a9b861610d1fb25fb56c0d0f3394ce8b4697ab2e30e942675e845cc51dcbbf1183e83d2e41a0e30029b3041b5b951da4eb2598ebe1a56f76e5f5679a219eaa617320788e56e3a859548c89c6e07118f3e242e1fe57751fa04921d45bb8fab060d8856f26306e99bae29413104ef02b2f1f0be3df3397d8d090770fa85839ffb9abb948728e3b666177b895daed043badd41246b2d4a43909419f4d28a0c3983b381d4291b296e3042071c0924734e2463d904673928154c1674821e854a4d425addc87871ec41457ca89eb71800642e935f76786eb3b2843820efb51f88c2990afd7088a2e75bd3884ed7c6b50c2fa5adef14ac4b7ecb51e2d09d026d9e52973b3da3f92087a22e1f67448fdb10b84e6e47161ec691a3f131daa593be8d135b9bd0a3bbfc9f6e70320864eb69e34cc133a2e79eb64c4560a1a39ab7aa12d4287c085c807fdc9aa6e9ca83e81fc924b1460bb71870a0fed6b7aea425139b2821a920686d4a3a6517d956a714dba6f1214d082559c6242a4c14dd7196601c6a6744a36f5b86318867cd11a7365b511bcd8a75ec1a1f6994d078446642cb0c2e80d6fcb7016ea58a2e653cc0ea72b06a74f6c5f261fe02fc32a8e01598604804a3b10ccb1f04944573355907fd8103984b92878968d595a47704e7ec11074b31eb2c16bd21fdef061f31a3e343f43eab5c357bd1d4d517bbaf2ed8f75bc03ea837cf7d18e240f2ed000736d22af81881d29aabca16966bc47c796d7d1b9d5277a8ce0c007629a59ad6ffb3b64e4fb68a36914256100f52de27f527125d61c052bd90be6ad17cae3718861a1323f96b291facdc5015b283106aa973f9f946b4b17c33debaa85383c5d460e3b0f46d83af57924464bbb68ea28113163084080c2a8ee80c02fd818274a8cdb0b6d38b09d961ac7bf25c88721ca51ecde7f47cdd656389aa5cfb2deccd850afc87854abc3b6b6bfbe74ca127192cb44c5a420e663889f78d08825a220855b451ff8a99108f002e9c2cf974b43d82ea584ae1a7cc22a711fecc2dd2be9a48c11d26c0de179de0f93c5b24b54491436f781745a0ba43b8ceb0381a0b8c466330050b9499f91c770cd71c1219aa9c4715f428b0b84259ed6f8fbec78dcebf4b712d6d2c4cd079516a67bee6423d6b38585f4e287aba3bbb4f5beb1c2db9f01ba6bb876e1559b3e47fb69d5b3b7d6d9d749427d5b4bf2d383882ae4d5c1f3b8162fd6307d0ec8a3f780ef5d96535b4859f50d0b3030fedecfc98fccfd54d4b81543aa3f3d9f9c1adc8256ffc35936353a2476dd736716c4cc15405bf113f1f3b58e4359782dd749200cdc02b1c2bfe7ff4f2653c1b8f669f8dff657fc4f02d4ea21b930a5c67ac147eda0390f9232140cd0154bb8146565f5cbc1a13a69a9b9559e328c6e96b5c23e88ded25376c8034d5959e51b29b3c27f409a7ef66416847856feba40a88317a40eae64d797b3873eaf9829d0a2725f9f89079a9c32e992c7b0275dfd747a6e6ecd9812e4733be53d07d40391982c53df45b23f0a5c2210563dddf8087f0413ccc3e7b340628fe5e8038ff3d80808be7f3ecf0596c9cc5951dee5e22ca8f146d926519137d8d6b0639709a227188fd3538b8e4b35b7f7aedd86621dff49f17347944988d60ba4fae2fe9944e27747af5f537a713ba45a7974fae7eba7c762a4c6e8241588c22e3c0764a2fc3cbf4b23ea53d4cfb76009cbcd770b188b105c7a90c1fed0238fb77c891fb4761a9b9379fcb053aaa6cb136ea05743d00881315a42d55ee89fa1d361e6e20b4cbee2b09dc30ed79c547ba2b77f146ef6608e7dd4f1634d5cb5225d1c1e087ff94914fe2d204cee3cfd41445bb6971bac16791372c25d2cbcc2f41cd3a77f302e64e9c610ff3447e70910c9598ece0a0a313025ef445017342377276ba0aca7cd081ab371785396bd529dcdf7a9030c5fd46ced03c8fe461a49b42be9576285f430c95a65e213da75abe1e11ae5ba2c74d04d7b80d83dde2dbe316f7c68609dc01c1222757d33ca46640ab0c944887b610a4424432b91f4b9b30996a42814186d2617171ae5f44f46c24fdfb28c275138fc8bb7222e7a83dba63c61a9404f6e4b484b58c19ef4ac4aa47324e83f45577efab7119c0b9095cd9b7ba0c764d606116db654c61743e5101b92bc9c1189f929009b1ad0eb6c65646cb6eab6ea433f1b977a50c142a083640d099d876869d72f2012e45df05dd3087f2dc95231265c61470055bafb2c8fc56d34ea77b35c3d62b104b68f08d52be38cd483e8138ae57698dbc149b841f88133ed9a124228f7d83afa6c6e9f5b64c56f99b29252fd46bcc0cc2c9745f568f8656151ac564429a64d9c8700418cee9500a9d167891438f46a78bd078841e3ba629ceb621e54940f6238681e160d433d986cf9c0d6e85179892b156e11b8bea903fb408bf31ddba45237cfe04b57c81811a836f30e08c1b4476d50b31a16ba3f2a0f716d2f6c1213f4afe6adce42a1ce8dccf9557c16efa69ebd6c71b6d0ea984e8a8736f765b147fe8dacd65c8995e15d777e78301b01b2f11d1a14000c2f92d8729ee158e8bf74290a7140945df8be409faa00241275546c23528a112997df7813375eb9116a3582990dca75f9f2276053d5cd0e9ff75cdb0ff410a1814331fca914aee7e05027ae7b6b8a6fb296db10e7b5a8922f21351cd7a056cd532ade0d32877f552c7cece9f269744f8d150dd6e961c32c9e847bd69da61f8b038d0e7aba75d37d61fdeca640424ffb3b2193a3c0fdc2f5fcefef09c8d2841088e0eeab3bebdc1137b247584384d65c201c23b071c0354db341f0794100cedfb6701ca0c00f5cbef04d474f10f00d45f020000ffff60bdb017d4220000"
	tmp.Length = 8916
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
