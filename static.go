//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/stdlib.mon"
	tmp.Contents = "1f8b08000000000004ffc458fb8f1bb711fefdfe8ae9a14da4588fd3396ee29e9520701cc0459b0677d7077a7171d4eeac9635452e48ee294ae1ffbdf886dcd54a91cf6ddaa20b24e7e50ee7f1cd37c3a1e6f3b3f99c6e6b1da8d286a970362a6d0355ad2da27636907a50daa895615aeda8e44ab5264e486f1ac31bb6914bd296161717bf82a6a6f54c1b67dff26e769694eb19cf92051da8513e92abc8b59e4254b654be9c1abdf2caf71b5e57b4732d6d75a8293adaa8b74c45adec9a03de63cd3fd93a70b7e44a5b2ee14ccd9ea1ea6363c83297d8ed79d56a53d27d882aea62b676f7a4aac89eb8d451db35c50e8c09a90035b156710f0cccf366c565c92515aed9219c883d852b99b6b52e6a44aa6d615ac8689b9430add9b25791cb8cd054dbc8bef11cd97768ddba932eb681c5f2bdde3446d9784fd139d36dca8895ce7e1c4919cfaadc51ad1e7820af6d88ca182ea9e208172319fd9629b8dfe444e1593b5a73a4694bb4d6b16e57b3c26de6e1ed0ff36c187c413cdfba2d79ee2212df7a541ed807ed6c0f8c304bd9b28f2cd60c1d83f069ab638d5cf92ed503afb2699a6adbb4914a15d59ca6ae8d78ebf3088d4488206558c039cbb1fd5ec59a37c8b832c825b81791ddb3c2d910e9bbd7b4a4a7b3c5a78b67cf2f7ffdece9b3cf9f7ff6fce955fefa8a68497439fb6cf1f9e5e7f8efd367cf2f3e7d76d5697f091dcac6409e2bf65e68e424ee69ad6c6938804cc8624995f37473fbf5eb6f27f8f3873fdecadf57d7d7703579239f61f3a2f3e0e61692b4a4c560e5d5f5352de9f2aa8ff21bed43244e8509f89525e5bdda417557d154416a943ed098fe7146e439b6dee6b5bb8b3734be3a7bd7abbdad993c87038d344d85ad8ce90c067af59797afbebb457a939103b3d0902d64ab8623565b136949776faecece88744523326c47e2f798bea045962691d7090364ba727e449a5e24f1712f8670b2d2a60df5c8cbdb24057ca7df8caf643b917ef224fdf31d16e47f0988ecd51083dfa97f0159a3c251887d38c93a21a08bded3642d857ab70f7aba483ebe0320f339dd2739b2ad31f7d25b368dd1858ed2e1669229403d9fd3eb20e8aff503e7d4136f9ab8fb12df7b0608b6b3f4619418b0f734b0a9c6b45c0efc04a2200845dfb2403604ab5226f010ab972005fa6472a337eb2cb12a6a621bfd6e923b82e8559db3aec24644a2236f02724ca9a5425fe3b9d4858aa023f6a1a5fb96a5d27b2b29b84a9bc87e34d892e304e940a20b89036f8696422109bc5f4dacd91313ae64ba75aa3225251c5a12f6dfe937a201ecaa68d43b3c12a171f6213db0dd5b11a6e6d74956999c214a68436526ac1023b327ef19e27f2de00862aeaa02e3b8ae48d9dd24e34ba1e142579a4b819974124ec89d604aa56d394242b2fff0fc510c514ffbf2dce3054c3a9c4031e8dc7fed43d2194361d9be4e53d8f3395917a972ad2d673094ab63bab83a7bb7ef85bf7539aadc0e0362ef79b6da093c89a021a2639f0afcef4edb114e24df7989d03d2de9fc5c7cc4eb079198cfe91be707dc17b78ff0412404d1d7520239ada876ebec546a9554598adb811be555745e140d6ad71ff61720fa6429fe8bb760526f07ca5c4abce51ffa6323abf4f46499811965628fd3d6d3243cc1bf1eec3c546a19aefac85c45aa69ccae5bee3989eaefab39ba8c5b3ed47252df4bd58d6a4654d96298af4713948bb82fc47c0e1da70758a613286e1a5ac2448f4bc656c8d0eb392ce8b8697ab1d300ca21758822e628ee613cc54f9f64720f0719c14d8490bc396a6d67392c435f0cbb7bb72fbb3c49156aa60b99032472339d224a14642eb7838c07e723975fe66f41ce09143b9a769fd79434303a899f0a287de90e253886e42d601b2f3f8d673ea7af30e1804e3fb2777367b92b79985266ab76a1b7d8d50abda0cb8e22d96b711a86a4cde02cad489151b81b489fd281c20623b4c795402ae74c2a9695379a7d9242c8c24ec8a351a590505647152fc01e74c41709798d0140e6327932e0f9989525e401759fce0371384be13c1cb2e866ab1af1e94199968152dcbace415bf20f1c240fdd2d50e72975b54b7734e7e552d4d5e38ce865eb3ddb6876a48130ae1c8d0b41af8c9cdbb8b1b511677457ffd30d6e069eb49d3646153c23ba71b4652a3c8b1c59de2697e046e1bce702fac356354dd71ec4ff402a4a34a9714b0007ee6f5d6b4a5a31b10a92920a866a55d2399bc0ba3aa7d0368df3714268c9322651a182f88ebb04e3523b231a7ddd3282413e2d07dcda74456d506b4e63d7f8c441098f47a426b4cae40269d59f14782b5d7425e3015657835595665f2c1fd62fc82f830a3e41098644281acbb0fc5e42691cae2afb901e68807229723f11afba96f48e00ce9e718814b3ce72d907d23f477a248c4e0fd14f55e5aed99ba6aebfe87d77c1be0f11fba0dfdc383fe481d4db010f74a0b5772180a596ab4a179a2d72be7ad0ae0d264977acce0a407669a5a9acff5c6b936eb6896d6285b4301ea2bc2fea5f487645014bf742f9a688e6f3f40b86a2468540ee41da07276de80a1920a45afa5c7e3fca36968ff39d16d3d4a03135e8306c7d5befec5a8a887477aca369e086050e2103838e233e43203d90a034d4665aebe962427a98eb5e3c37a29c47e947f339ddd45d3596e8cad66d116f6e54d03f6c540737975a85fad4c505eb8fdd5b666f791746e3ffecfa72cd1bf7c0645895683edb5a470e8d2a982aef36d2104e4d8c79cd44af37c2a29c48cf6bcc8b7f1b7dff7d78321ecd3e19ff723f3bba16578c8d8a05eea9eb74f4a6e2464a4722003201dbeea492d5bbc59b31e1b83a2eb9037c2523fb9bfc759a1748656f27073d2c477062a8e8e65d14ff1131df3353a4f9914d257384f8491f9a22ae13f0d12b6d7e06f2febdc8cf3ef9720cf8ff5bd05ffc0ce86fbddef49cfae8f12053bfc9e93895a2e348911380ddb14ff04e441891e99139f855e7a5b30f7cd04693411c7ac66dd94f712c9e36ef4460c872b42f39a94e7104a9c76f3da8837339b98e5b59a237848adc74e4269dd7a56515f4c592cebf3aa78f3ea2825e2ce9fcafe7b42f0d793a05c5ccf9729460e89e02379aa797024df7c058312b6abf97ed9a9ab4b46c5fc85cc84ee96d19dac333e9313cdba6791c4f11f87fe0a90678fef86fe2395dfe0ff0fc67000000ffff0498790d92180000"
	tmp.Length = 6290
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
