//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"errors"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a simple array containing one entry for each embedded
// resource.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

	var tmp EmbeddedResource

	tmp.Filename = "data/stdlib.mon"
	tmp.Contents = "1f8b08000000000004ffbc587d93dbb6f1feff3ec5fe6e7e4da45812effcd2c43d2b998ce374dc49d3ccf9fa32b5dd1c442e45d410c001c053948ebf7be7598014a5c8769bb4e54c722609eecbb3cf3e58a828ce8a826e1a1da8d686a974362a6d03d59d2da3763690ba53daa895615aeda8e25a7526ce486f5ac31bb6912bd2962e2f2e7e054b6de79936cebee1dde22c19d70b5e240f3a50ab7c245793eb3c85a86ca57c35377ae5951f3e785ed3ce75b4d5a1a1e868a3de30958db26b0eb88f0dffe4d351b815d7da7285601af60c531f1b4396b9c2d79e579d3615dd86a8a22e176b774baa8eec892b1db55d53ecc198910a30131b15f7c0c03d6f565c555c51e9da1dd289f8a67415d3b6d165834cb52d4d8735da26234c6bb6ec55e42a2334d736b26f3d47f63d5a37ee64885d60f17cab37ad5136de5274cef41f65c42a673f8ea48c6755eda851773c5aaf6d88ca18aea8e688102319fd8629b8dfe442e15a3b5a73a47947b4d6b1e9568bd26d8af0e687223b065f90cfb76e4b9efb8c24b601953bf6413b3b0023cc52b61a328b0dc3c6287ddaead8a056be2ff528aaec9ae6dab65da44a4555d0dc751177431d61910819a40a0b386739b7dfabd8f006155706b504f722aa7b563a1b227df79c96f46071f9f0f2d1e3fbbf7ef4e0d1678f3f7dfce02abf7d46b424babff8f4f2b3fb9fe1bf878f1e5f3c7c74d55b7f0a1bcac6409e6bf65e68e424ef79a36c6538804ca86245b5f3f4e2e6abe7dfcef0e70f7fbc91bfcfaeaf116a8a465ec3e7451fc18b1baca4255d8e9e3cbbbea625ddbf1ab2fc5afb10895363027e654979af7630dd7734d55835492f684aff3823f21c3b6ff3b39717af697a75f676307bd330790e0716699e1a5b19d33b0cf4ec2f4f9f7d7783f22627076e61217bc85e0d473ced4ca425bd7c7d757646a46b9a90613b91b8a7f4395de6d524eb75c20095ae9d9f90a62769f974588674b2d1b60bcdc4cbdd2c25fc52bf9e5ec9e744fadebdf4cfb77820ff4b40e4a8c6187ca3fe05648d0a47290ee924ef84842e864893b794eacb7dd2f3cb14e35b005214749bd691ed8cb9156dd9b446973a8ac22da45280ba28e87910f4d7fa8e73e989376ddc7d81f7030304db457a31490cd8471ad8d4535a2e477102511084a2ef58201b83552b13788cd55390023a99c218dc3a4bacca86d846bf9b654510bbaa0fd6d5f81099e8c89b801a539254d86b3d57ba541174c4779074dfb174fae02525576b13d94f469fe43c413a90e842f2c09da1a55048121f9e26d6ec89895032dd7a539992920e2d09dfbfd4afc502d855d3640878228ba6398674c1f7e045989a6f67d9640a8628a10d9399b0428ccc9efccd18ff6b01471073751d18db754dcaee66195f0a2d97bad65c09cca4d3e284dc09a6d4da56131424c78fc8df8b21fa69df9e7bbc80498f1328069bfbb7434a3a63282cdbf7694abb28c8ba48b5eb6cb580a3dc1df3cbabb3b77b2dfc9dcb5965390cc87de0d96a27f024828608c53e95f8df9db613ec48be8f12a97b5ad2f9b9c488db0f225114f4b5f323ee4bd847f82013c2d2e7d202b9ace876ebec5c7a95545549d8815be555745e0c8d7ad71fea0b10bdb794f8255a3069f003632e15def20fc3b6914d7abab7ccc04c32b1a7e9d3d3243cc1bf01ec3c546a19ae86cc5c4daa6dcdae7f3c7012dd3f74737419b7bca9e5a2be93aa1bd54ea8b6e5b85eef2d506ee2a111f33e745c1e609976a0b869690917032e195b21c360e7b0a1e3a61d969d065036a943143147f100e3297efab4266b38c8086e228514cd91b49de5b40c7d3e56f7febb1cf22c75a8995fca1c20999bf91c59a22173bb1d543c381fb9fa22bf0bb24fa0d921da435d53d1c0e8b4fc5442e94dbf29213014ef12be71f3d37c8a82bec484033afdc8de15ce72dff270a5cc56edc2e0b1ef157a42f77b8ae4a82568381299c15e5a9322a37036109dd281c20623b4c791403ae74c3a9695379a7d5a8594859d580fa14a29a1ad8e3a5e803d50c42709798d0140e632b932e0799b9547a803fa3eed0712705e85fd70cca2175bd54a4c77ca740c94e2d6f501da8a7fe02075e84f813a4fa9ab5d3aa3392f87a2be1f17444f3befd946b3230d8471e4685d087a6564dfc689ad8bd8a3fbfe9f6f7032f0a4edbc35aae405d10b475ba6d2b3ac23cbdb1412c2289df75cc27ed8aab6ede541e20fa4a26493845b1238087feb3a53d18a89559092d470d4a88aced904d6f53985ae6d9d8f338224cb9844a50a123bce128c43ed8268f255c74806f5b41c706ad3357541ad398d5dd3131b25229e909ad12a930ba4557f52e0ada8e84ac6033c5d8d9eaa34fbe2f161ff82fc32a8e0158c604884a1a90ccbef2494c6e6aa720ce98205189726f73389aa97a4b70470f68c43a6987596cb2191e13ab22369f476887e6a2aabe6e09a7a7dd17b75c1771f22f681debc707ecc03e9b7031ee8406bef42004b2dd7b52e355bd47c75a75d174c5addb33a1b00d9454a535bffb9d1269d6c13dbc40b69613c96f2bea9ff4faa2b0658d40bed9b322a8af40b86a2568540ee4ee4839335a8420608a5169dcbf747d5c6e3e37aa787696ad0981a74184bdfd63bbb962622dd6feb100d9cb0c0215460a438123316a40b2b280db599d67a7e39233daef5b03c0b51aea3e85151d08ba6efc60aaa6cdd16f966a182fd2454e8a3a2c021fa8e7d2445b57168730705c16f04ebfdcf23dfe0278bdf8a7a543a94caa78148c421ff8e83866dd96b57cd28387ab8784c5b6d0cadb8741ba687c293a1f2e26b11ddf75a2a8f8949a6e7093ca75995a620f8fe387c70c66a54684e1db1f0fc7d27acc51bde85c9f4171eb45c86cc225ae004c5ca001ee6d9e318ddf7f571a62805dda38bc5c5c1b1ff9a37ee8ec9b0aa20c2db46470ead2a996aef3682f3a9c9393f33d1eb4def494483d7989bff3679f52adc9b4e169f4cff7f3f43bb0e47ad8d8a25ceebeb3482249103b527b2004d058ef53bb63c7d79f97a4ad8b68fa527d551924baf4725bc4e7313a91ced0c1c1c38913338315cf5733ff2396ad077cc56698e6653cb3c2581d087a6a9eb047cf44a9b9f81bc7f27f28b4fbe9802feff14f4173f03fa1baf3703a73e7a7f92497773394e95e83853d40460f7ec13bc1311266406640e68de37117463ec10ad64dc96fd1ce3c169f74e168c590e19971dfb1447507afce6853e38971dfc58d213bdb1a8a424bef28b427e2ed25dd2e74b3afff29c3efa884a7ab2a4f3bf9ed3be35e4ea0d940be7ab4982a1bf4a9cec1edc1768fa0bceca45d9f8fdda5edc45dab37f2173295f8ac667680ff7e61e4f950b071c15d96eb3628f1a16054dbe4b03e32e2bfcac9f2077bd781d0e579901d17d9fcc8c01cfb2f2ead5e217ab8930270b64c2ec6830ea99d42fc49e91178ec4a507e014a1bab67d3fa164c138bfff15a1d488503ffe9b849a2fff0b84fa67000000ffff20f8114f9b1a0000"
	tmp.Length = 6811
	RESOURCES = append(RESOURCES, tmp)

}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	for _, entry := range RESOURCES {
		//
		// We found the file contents.
		//
		if entry.Filename == path {
			var raw bytes.Buffer
			var err error

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			if err != nil {
				return nil, err
			}
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
			if err != nil {
				return nil, err
			}

			// Return it.
			return raw.Bytes(), nil
		}
	}
	return nil, errors.New("Failed to find resource")
}

//
// Return the available resources.
//
func getResources() []EmbeddedResource {
	return RESOURCES
}
