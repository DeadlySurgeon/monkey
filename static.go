//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
	Filename string
	Contents string
	Length   int
}

//
// RESOURCES is a map containing all embedded resources. The map key is the
// file name.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES = map[string]EmbeddedResource{

	"data/stdlib.mon": {
		Filename: "data/stdlib.mon",
		Contents: "H4sIAAAAAAAC/+w87ZbbtpX/5ymueboxlaE0omSnccaKT9pMd72bJjnjSbtnR2oNkZCEDkVwAXA0U595gfRPHyTvldfYgwuABChqrDjNbn9sPxILvLjE/cT9os/OTs7O4GrDJKxYQSHjpSKslLCqy0wxXkogt4QVZFlQWN5DTlekLlQCbFsVdEtLRXNgJaTj8b9oTFUtKGx5eUPvRycGORvRkXkDk1ARoYCvgNcCpCJlTkQ+LNhSENFseL2Ce17DjskNKA5bckMh25ByTaX+rTZ0b6t33JyuWElzjWhDBdWonhYFlJTmeregy5oVObyViiiWjdb8LZCVogJozhQr16AcMxIgUqNRG6JaxujX0+2S5jnNIePVvSYH92Q8p7DbsGyjKWVlVtQ5cscgobCmJRVEc8xwaMhKRUUlqKLCEX/Vf8RaUkTxVvOdlOotKM6LDsdyXj5VQApBSX4PG3Lrw7NSKlIUNIcVVfqICgp2Q0HyzywW/Z81hzVVMKwB1kxt6uUo49szeXN3ZhGdWeCv+Q4EdRSFXLmlQjJeNoxBzSJl3lCmNhQ1oyUfdkxtNBHCido7lX01DFlZ1QpyosgZDHmt9K+GSRZ4zcG8BJlzYrH8nqgN3WpIUmhZagVSWron+AO+fQ0zmI7SZ+nzF5NPnk+ff/ri1y+m5/bpBcAMYDL6dfrp5FP9/2fPX4yfPT932H/HCjrky7/QTElYcQFvrr58/XWi//XNd1cJ0v7m6suLy0snsUt9HqFVqwRe0dIoHpVoZCXZ0rOKqA3sqBHjlqxZNpRKsHItjY5pLERQEDTj65L9leZ6q2ZgpBFGUAm2ZYrd0lFLJp4LZvjKGKIn+PtJBIPzFuCb765CiG++u+qAXFxehiAXl5cGpOFIY48oWFJCZPgz0gejK3aHh299i+JAigLUfUWlY9If9VbUIDRqphECK4dVQTI0bMiIXrjlN0YDzSuGW6o2PPc1CKJopFHHg3O3Mu0uXC+6K1RlzoeVUlGSa43ekFsUFgdRl3jeGJYF2QDuO3GOyJ7FooR3JwAgqKpFGeOSpMVqMDg/efhnZplRuIBpe0vXi/21Ixhn9zzGOoc2YJ5d9NnnGHil/SORkgr1FgxBmkF8Z5w2umdW9l49+lRL9EmKSu2g6S3Vq2xLtaNkEgpOcpqPgnOad8W3pEhgK9cwg+iSyrpQsCMSSq7gqRI1fapNwxDBVhAbnbklxQBmM4gMQZEFQEIRxQzoLSliuCWF5o95hvufWIh2C0BVKxlDZE80jyJIAM8VzaMBrAjTjn8IER5Ur5ZRixWA3jEVp83Cw4n7By0kbV5j3m5OtPfuY/E+aJnZc0Kk+YM73Ipe8H9HT2BFCknPA6gnuBbAGUs0Dg45O4/0vaNZ0Qum3dwxcNrX7cO1Wvc7JqQCaoIhreekBCIEuQ9UZaWhYvPAMg+5WdAyxsUBfD6DtOGr1Xaz4Xq8MEx9ODkBODuzT6FkBUYa26pgGVMY74wC9trXXo+TdGGoGIdkGoDreSQVvaXzKEkXlli7EII/sfCLQcMFz/gElQEHYGiCP+2lLIMkXPznby++vUKLRGQBmzSGkEsFVa1FXC/OT/o45zFOwzOYQWp0bsVFDAxe+uA9plbVchObX4nlOVu0Vnd6av7Y2oWVgNlyHqq01hwk5HoxsMxElF1m6iMZgq/HyUTLB6HTR6BSD27yOFwyTZ4lzxvo5yG0daPmmIH07Ymv04Wn6lbIX5EjVL0gBzW9Wf0cxl1VN1xvxTRMF4HOv3VKXxfF2/eoPR4BmdrHqSfm8b4OvzYXxZrdUqfBdFup+1eh19cPRuZB7Pt1fXa8l9DOAjXDk2vXdt7VIOPcgtNfLxrsnYNfa/kffNiKcdoB8mj8LYYMDZXtnVsCJdkGaKnEfWKjdTxhY80YzpvAXdGtCXRNuqPxVYLmLNO5gNmn0y1R01EP71asUFTE3hbLK2e843P3q4BZy9dmtesQPDP32K4hkRyYgd5/zRb+Pdq8PUaggX+lhW9B7wDOPRiU4V3pOQnU1x7/YPMEnes0HNVcvqG0Al4W9/peramN7jHUiybRyDdwBUTTDGkCkwSmkMAwTVpXncCzZ7A4D4nQO0jD8VUZlwN411wgaB1wDg/+pW20mbTxl3EIk8U8Cu79Xt22TAkDhyBQIMG7YM8UWiSdm/bSvkpHrauVpCrRJyXlfWJVE2RFM7ZiOulWdKuDPb1qlK5XD8s81pDHqt8hVUOGWRXT3MK3e6yyBDJLnFWZUGPOzjBiXPG6zEeeCg3T85OHc989oHNfmNP/GqUz7NwZAUjad+8HENM+L2kgemEaiXzJqe8yUYF1zCeVDvxZTlv+9/lQWyKRr2Id8kMY6CM/zbvt0yeaUBh0nKUlpMU16TpG6IGZWsfoYrgyhy0r2bbeWipY39Vmjr1lJfr9jsocdlnmdoCXXpjSiHccqsAXUtZbGxm5k0h3NPeGLSudSxtbB6gzl/uKQrah2Q0r16Mw29iyEvkXsVLRNRURfPRR58mq4ET5Bu5SCkezcVI7Lm6kvi3KerukQsIQ1VbnGw0+kwc0Vu4nAQ2hr1ew03SWORCQW1IUVAAvaQJSs1SNemzN4Osl1SfWGuIBgoOne0R/KNkOa4f0bgb0cNLjMF6iQL0zePJtrqxen2F1aMvK0CjiRuWNrs4wtQjNIoZ0NErHj0JcD9NkOEmGPqLhtAfOez6GQZRA5KzJRIkYjdhLj0n4KxU8LBehAZK7Iw2Q3P1vG6A5WmOA5K7HAGkpa0FhR58KCjklBSvXppaDJZqORZK7QxbpnrzHIsndkRZJ7n66Ra4FJeqf0iKPJfvnWOTnKGHfIluBH2eR5K5rkdranlvV1db2vMeMnNE6oOnjJunAhmm/SbrnziStfR1nkv/ObfjUZO5+Zr+89+59Eyj2RVh/4ayMIdsQ4Yf4AmYQRedHh1zaQXDh5SePquJrEwva6J1JKHk5tNTmuYkTaUUEUVz4mooJdJiaaoGezvD8HXU5O0Nk3LCopHdNXmxRCjidgVes1Kr4iMKI/qjG8G8ejTD0xjg8HU1G024poQvvgU+mfh7fhNK3VEjayLNPdsLAxF4dxmZchwSFEilCDrp9NodKjBEVw3TRpAHFcGgS/UPcsGx0RDYHc5nJFPOhsGBhCZVcKJq/soilKS+ybrbQWIEB7+OGReTunbMzuDDuHrUSYYZbqj0RbIgJiiXZUvRFI8sxta1gBu8eHAfbewtFknFh1NNW9DvVK1NaaBhrkEmqYrWtEuebbL8haeqovsq5UsoVNkYzUsKSGmfKS/okKNTc0HsZ4zsGEBbYnDv+QiltVLakj66/dQ94623ZHc2HeDOY1PaJXx02aPxyfqd87PlpPHhQ2etXQH1/u1KFdmhnvGz8lxYvKXbkvpWyFxhMOuWoJqF1PHu9AgIF3okmt5RN1IpNPLWhBpASUTAH1aQ/xg8p79XvzSNf2j8N08V+Kunnyg/7Qg6ICBzLME3GSbpo9bnrSA4/6j4JDO3NjlRIromZdEK+4472Mqd3bY/KzQLUsu1ZasxalZzVjQB+WwtBS1Xcmw5M+VRBxaVky8I0ajhsa0VU68Sc/bl21wjgDdcxTYbBDBAo6a4JKiHjQtBM45c7UlW2A+uqMER5FxwSEBx/x+si1+ZDiURpr0yvNoeIFpKyVQSyriouVAL66sKKImRE4tmlPjdeFgDxlzV1Yw2laT6xFdSSrKmpbA76vNGOVDGQBJZemZz8gRQuSlk2bnrprRITrO778uYKfsSx9+kq0x6YBNFa4PBFgqdqgq1uWahFsuyWljp4kAwviuurMPXfNWwR7HufzXTunqbqlo6TyXhxbgtqKIBxkg7ObbXseoyVnwlefcbwmjMaa4VzW9H66bhTxJ0egTswSS5Ut6DdtcG14FJqEyvpasUyRkutsMtbxmtZ3B+6CP//Fuy/BTVvftlL8OwM/rhhBd1rVBgH2blenpgiWhu7BIEyDlYRqIiUwG/xImuKpdDTSzuQXB+IxM07mB0B8i7hneDlGn2uSyofvfs6fkGvW3dmvSAbpgmwfRP3G3e282wY+GbjnHeu44OS70at+WvEBzwA2DgTWktFWzi3f+q5M4/Zaz1H+gE7jV+YfMDOCe6chuXcy07Dx868uZvRZlQ6Dayq4t4tN2G0RtE4C8VtvuYE363Fe06I1wZrUW3IkpoZLS5yKmBJM1JLiiGCIXC4JDpsUFRqozMjJrf8hpqoLoG/1FLhy41fyngpmVT6BOb4ctRbUKpiWJXZL9eHMn5qVWZNMnh+8t5Ok9pWez3og+2lfflPkxfJ8JnfEDJaoKndawR9DOU5PAz2gK3K+M2hnt7QiwTSTxL4NO3pER3RGurv/OxTNEmGaTJMJ0fSdDr5GSQN03ECaQLP/pEkNaZm9K4u2X+3qemGgl6oKZgrNKi49KmthnYdaO9aDeYgjAofct29+hpcq+Dfq50LNZyNsC9ux1PQOaBfxIs0mGtR22qEt+vABRSDTpurTfrNfycLS28zoJDAJEz5XYubl7dUX8SAxUSckyvBlh2d7/mK3VD4V0wPciYzYoMOk72YgWDsalPBeJ6A5PBs9AJ2rCi0U+JbCs9CkeC7Ror/mXUm1vSbzc0Gg273ykwZTUep22iJs4fdnxgxhjAdpS42dBtNtbDV/k6U6KeN2O/dixaD4YcNkZu+2Qe9/tjog5Xpz52AePdwaMgB3s2jkmzpPPqs6Xs/9Aw77OlCowCoDlZaAW1OQRT/8yru6UXCKYxH4wMCtJvcoJjG3hVeA6RFNRrvDWbwulTAs6wWtMyodD1tI5BsQwTJsPpgDaun5mrXMo0p1jva3DA7IsHrVO5QsFi6nc38ql3rJzI4bYPDh0PFvKxj2I3c7EHnEZ1HfR3ofcALCzjuAv74/Q8//u3vHiT+6hunMrCd/4Vbv//Bbv2kK6NLuuW3FApKcuztbJiisiIZhZXg2/fJpVCCbWO/Dk5xZvRP8XwuTwfx6OPBr9qquA6KZrAlKtvEgq6ND7YFcRSNBuhaGK5ep4sBGDMLL6YgxIXOKGYMEcCPf/v7j9//ABA1h53NIGpWdXbiE2MHSwMOIx4UXBeNW3wMS6dKXVGiPZ6Bhq9xIFf2MlcgbIxC9CrWptHgkjp8GrYBOzx5cMZgQAODMCV9xzwwIO+pXceOe5E74dTnqf9Pny8G9gB7P25wmdGO6OMP2Dr+8K3D417b22+w4kr6RbjXcHB9ouO9ViMk9FZHdhgCKblDoJRQOCGdhpJ+Jk0nky6KyWT6nv09HkYJwooPcDHioIsZffxqoP3MP8rHjP8BPkZ4zsGtB7zq9Q5YP8Xnsl5KJYIA2jYk8YHND5FvOoHEr4dGgKPKBS3XatPMjTXA+IWYGdaSwCvNW1KYcUiM/ez3b6C4+6jLYmo+yxg1H0gp+hn8nt/qbFUnumRjP4TYYeHJfFaANXDmezGsXPfJ1hAVS0WESuxbZ6CN8Z3rkprGlqCm2+COpja09A7ucnkVUj/ygznEbRrLbSPPvrGtwg0BDwPhHIFZ2+o8fEmh4hI/Qmqwm8cvfZs1S7PuKIZt0/WJShOoOIclWxvydvRpUUCGNSX9ZNR536lD87kpHWkiBh9AXKZtBZa8LnUEMKRCcCG7L/t81leqdIplO98PJ14VIWyIZ7xiNG+HWtDPxY5xDeoBfPQRXmoI/dIRMfAvN9m4Q9zuHCL+aIpjBkNTYPAsXSPoRLz/RouCw46LIo+cTkKaPDOxb6SfRtDasIVw36BEfizWi+oTi8gsH4nJeW+HZAz+LXs0FuPtW6paLB96kIlF8cGEJJMPI6WDJ23x/Bwk6Xj889EMAzzHkOX18w0MTin5ft8MBIc5U3ALcKG9GVu1zUQ7advjac3QaUlpXlDw3OuaKsipIqyQQJZYtayFNq6fMskSujTsfVIiso3vhvXur+xuc4x2/xprAA1tQJQptLreqPW4vDxUj2wAXRXdioUl8BXY9+CbcjPdi+NvKtu88tLCFsfM59OhcedHBl/ceHNf2odywPQQHs8PLeCtA5y+B/Db1xcOdLifH6JGtsDuN/SnnlL9+Le/01v64/c/UOntard80pljt4I2Xz/zwnwygfe+hF+9WxZk82DHBv12eqQfRBjNuNCjHWDBukyfKnsviWEjN7AfG8av5MDEh/P5r+bzd/H1n+bzh8XpYD5/0DnpceEiapoLF73SdiW0opmI0S95K35j19NgvZLKrk8W5z4i2/jR+E5dx2wjN9eK3ywGcKo3+ngOnbV7w5m6nP2QNJCPrAqmGifTNEVwGRt+vARS3relmfabf9OWCEfN/LD97Ax+c9+GZCjKwgSEvPRi/s8ggiiB6OqL30QJfATR5cXVd5dfR/3xoUYRS1ppocJczBU2Eptk6rEefzgTEDRqbf58aNpOuyP8utZxwesdZv7MZLODyXAD8JI2rlDTMGw5+iqYi6msZ87ajwE67cZv/gNbKCiXSlDbxh6SLKu3dYF/9YLiNzjRobjpKnn9Tr+aqbbV3iwgppfeeAE2hvv6jgHn/BzppD2qVFzQDifaU7kDNyOKBunpDLLDUz/4RUbzdwYQyEm51lmk/YsDXgG8XoHkQKqKlrntvj5CsTd+4VpRj05KlPE8SmEC03lktXHQ546xZtqFnEeTedT3ueRJWBMKEyUQmC9LINZRYrLXVBmsX8WEQend5st6nANC+EOlJI07Bl7kCcK2RiShLQGhUZU5xdFg96VKkYM/M4OPP3fF8D2rMd/1n3S8pXR38jgxGPxb2W2V9SrYKuuVv9W+GvOemBf5oL3aZeNGNW2neqd7dIAc191xyX13PJPe0qhlW0S1z7qwt18k1cXtRRRUihBu0FdD2Uf2BSLzsOnn78EWaMyVYNumZPvR46WVw/PMdq1bX3GjVa7Qee7fLUVT4ejkUADRyKt9eOQcqqpGkIZ70kc29TVAutSB4lDwHRXDjMh+O1AcAeKf2hT3XN/BfnjP1WBLtNpaoi/w64AMXs4g+q+obzRMI8hGXORx+DUh9iSmk86ahs02Iu7/atPl5617fWw2+43R0JY7fWrZPu0TpsuIQhx29T1IDvU6W7ES+0mEBYm/NcH6vW2CJS56v3d9sEG/9P9s0PSUE+fz0c8uIqLVuLbZ4UpiC8hawEAe01E6jYLjYoMtnfqMbJ71iAPvox40Rirmg5RjcUXTvsP85LP0H8V9OfM+ZCdHe4C6qh73AAjwf+EBiOcB/voTPcDwF/YA0nkAxx0tnDdXF3+4CETjnj7uAXwcPR6gB8n/BAAA///Qtf/gtE0AAA==",
		Length:   19892,
	},
}

//
// Return the contents of a resource.
//
func getResource(path string) ([]byte, error) {
	if entry, ok := RESOURCES[path]; ok {
		var raw bytes.Buffer
		var err error

		// Decode the data.
		in, err := base64.StdEncoding.DecodeString(entry.Contents)
		if err != nil {
			return nil, err
		}

		// Gunzip the data to the client
		gr, err := gzip.NewReader(bytes.NewBuffer(in))
		if err != nil {
			return nil, err
		}
		defer gr.Close()
		data, err := ioutil.ReadAll(gr)
		if err != nil {
			return nil, err
		}
		_, err = raw.Write(data)
		if err != nil {
			return nil, err
		}

		// Return it.
		return raw.Bytes(), nil
	}
	return nil, fmt.Errorf("failed to find resource '%s'", path)
}

//
// Return the available resources in a slice.
//
func getResources() []EmbeddedResource {
	i := 0
	ret := make([]EmbeddedResource, len(RESOURCES))
	for _, v := range RESOURCES {
		ret[i] = v
		i++
	}
	return ret
}
